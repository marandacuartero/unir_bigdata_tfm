package org.unir.tfm;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import java.util.TreeMap;
import java.util.concurrent.atomic.AtomicInteger;

import org.unir.tfm.dao.ListaNombres;
import org.unir.tfm.dao.Participante;
import org.unir.tfm.dao.Tournament;

public class DataAnonimizer {

	private TreeMap<String, String> tm = new TreeMap<String, String>();
	private ArrayList<String> noUsedNames = new ArrayList<String>();
	private AtomicInteger ai = new AtomicInteger(0);
	
	void clear() {
		tm.clear();
		noUsedNames.clear();
		noUsedNames.addAll(Arrays.asList(ListaNombres.LISTA));
		ai.set(0);
	}

	void refactor(Tournament[] tournaments) {
		for (Tournament t : tournaments) {
			if (t.getParticipantes() != null && t.getParticipantes().length > 0) {
				for (Participante p : t.getParticipantes()) {
					StringBuilder sb = new StringBuilder(p.getName().toLowerCase());
					for (int i = sb.length() - 1; i >= 0; i--) {
						char c = sb.charAt(i);
						if (!Character.isAlphabetic(c)) {
							sb.deleteCharAt(i);
						}
					}
					String name = searchNombre(sb.toString());
					p.setName(name);
				}
			}
		}
	}

	private String searchNombre(String name) {
		String suffix = ai.get() <= 0 ? "" : "_" + ai.get();
		if( noUsedNames.isEmpty() ) {
			noUsedNames.addAll(Arrays.asList(ListaNombres.LISTA));
			int i = ai.incrementAndGet();
			suffix =  "_" + i;
			System.err.print("INICIA!!!!! " + i);
		}
		if (tm.containsKey(name)) {
			return tm.get(name);
		}
		if( noUsedNames.size() == 1 ) {
			String str = noUsedNames.get(0) + "_" + suffix;
			noUsedNames.clear();
			tm.put(name, str);
			return str;
			
		}
		int i = new Random().nextInt(noUsedNames.size());
		String str = noUsedNames.remove(i);
		tm.put(name, str);
		return str;
	}
}
